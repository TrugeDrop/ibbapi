<script src="https://unpkg.com/leaflet@1.9.2/dist/leaflet.js"></script>
<link href="https://unpkg.com/leaflet@1.9.2/dist/leaflet.css" rel="stylesheet"/>

<style>
    #search-container {
        display: flex;
        flex-direction: row;
        align-content: center;
        justify-content: center;
        align-items: center;
    }
    
    #search-container {
        height: 10%;
    }
    
    .searchBarTop {
        animation-name: search-bar-top-animation;
        animation-duration: 1s;
        animation-fill-mode: forwards;
    }
    
    @keyframes search-bar-top-animation {
        0% {
            height: 95%;
        }
        
        100% {
            height: 10%;
        }
    }
    
    #loader {
      border: 8px solid #f3f3f3;
      border-top: 8px solid #3498db;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      animation: spin 2s linear infinite;
      position: absolute;
      bottom: 10px;
      left: 10px;
      z-index: 1200;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    #content {
        display: none;
        align-items: center;
        justify-content: center;
        align-content: center;
    }
    
    @media screen and (max-width: 520px){
        #search-container {
            flex-direction: column;
        }
        
        #search {
            width: 75%!important;
        }
    }
    
    .container-fluid {
        position: absolute;
        top: 0;
        z-index: 1000;
    }
</style>

<div class="container-fluid">
    <form id="search-container" class="mt-3" onsubmit="searchFunc(event)" autocomplete="off">
        <h4 class="me-3">IBB API</h4>
        <input id="search" type="search" class="form-control" style="width: 50%;" placeholder="Hat veya Araç kapı no..." />
    </form>
    <button onclick="findLocation()" class="border-0 shadow bg-light p-1" style="font-size: 1.5rem; border-radius: 4px; position: absolute; right: 10px; top: 10px;"><i class="bi bi-geo-alt"></i></button>
</div>

<div id="map-content">
    <div id="map"></div>
</div>

<div id="loader"></div>

<script>
    /* loader */
    setTimeout(() => $('#loader').hide(), 500);
    
    /* map */
    var element = document.getElementById('map');
    element.style = 'height: 100%;';
    var map = L.map(element);
            
    L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);
            
    var target = L.latLng(41.015137, 28.979530);

    map.setView(target, 11); 
    /* map end */
    
    /* layers */
    var layers = [];
    
    function addLayer(layer, multipleLayer){
        layers.forEach(data => {
            if(data.options.title === "Sen") return;
            if(multipleLayer === true && data.options.title === layer.options.title) return;
            data.remove();
        });
        
        layers = layers.filter(function(a){
           if(multipleLayer === true){
               return a.options.title === "Sen" || a.options.title === layer.options.title;
           }
           return a.options.title === "Sen";
        });
        
        layers.push(layer);
    };
    
    function clearLayers(){
        layers.forEach(data => {
            if(data.options.title === "Sen") return;
            data.remove();
        });
        
        layers = [];
    };
    /* layers end */
    
    function addToMap(e){
        let customIcon = {
            iconUrl: e.iconURL ? e.iconURL : "https://unpkg.com/leaflet@1.6.0/dist/images/marker-icon.png",
            iconSize:[30,30]
        }
                
        let myIcon = L.icon(customIcon);

        let iconOptions = {
            title: e.name,
            draggable: false,
            icon: myIcon
        }
                
        let marker = new L.Marker([e.coordinates[1], e.coordinates[0]], iconOptions);
        marker.addTo(map);
        marker.bindPopup(e.popupBind ? e.popupBind : `<h6>${e.name}</h6>`);
        addLayer(marker, e.multipleLayer);
        
        if(e.openPopup === true) marker.openPopup();
        if(e.mapViewI) map.setView(L.latLng(e.coordinates[1], e.coordinates[0]), e.mapViewI);
    };
    
    function kapiNoTakip(kapiNo, callback){
        $.ajax({
            method: "GET",
            url: "/api/filo",
            data: {
                KapiNo: kapiNo
            },
            success: function(result){
                const arac = result.features[0];
                
                if(!arac) return callback({ status: 404 });
                
                clearLayers()
                    
                addToMap({
                    name: arac.properties.KapiNo,
                    coordinates: arac.geometry.coordinates,
                    mapViewI: 15
                });
                
                return callback({ status: 200 });
            },
            error: function(){
                return callback({ status: 404 });
            }
        });
    };
    
    function hatTakip(hatKodu, callback){
        $.ajax({
            method: "GET",
            url: "/api/hat-takip",
            data: {
                HatKodu: hatKodu
            },
            success: function(result){
                if(result.features.length <= 0) return callback({ status: 404 });
                
                clearLayers()

                result.features.forEach(e => {
                    addToMap({
                        name: e.properties.hatkodu,
                        coordinates: e.geometry.coordinates,
                        popupBind: `<div style="display: flex!important; align-content: center; flex-direction: row; align-items: center;"><b style="font-size: 1.5rem; margin-right: 0.5rem;">${e.properties.hatkodu}</b>${e.properties.hatad}</div>${e.properties.yon}`,
                        multipleLayer: true
                     });
               });
                
                var target = L.latLng(41.015137, 28.979530);
                map.setView(target, 11); 
                
                return callback({ status: 200 });
           },
           error: function(){
               return callback({ status: 404 });
           }
       });
    };
    
    function searchFunc(event){
        event.preventDefault();
        $('#search').attr("disabled", true);
        $('#loader').show();
        
        const searchValue = event.target[0].value;
        
        hatTakip(searchValue, function(data){
           if(data.status !== 200){
               kapiNoTakip(searchValue, function(data){
                   $('#search').attr("disabled", false);
                   $('#loader').hide();
                   if(data.status !== 200) return alert("Sonuç bulunamadı!");
               });
           }else{
               $('#search').attr("disabled", false);
               $('#loader').hide();
           };
        });
    };
    
    function findLocation(){
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(position => {
               addToMap({
                   name: "Sen",
                   coordinates: [position.coords.longitude, position.coords.latitude],
                   openPopup: true,
                   mapViewI: 15,
                   iconURL: "/images/marker-circle.png"
               });
            });
        } else {
            alert("Coğrafi konum bu tarayıcı tarafından desteklenmiyor.");
        }
    };
</script>